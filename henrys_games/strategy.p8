pico-8 cartridge // http://www.pico-8.com
version 32
__lua__
--strategy game
--by henry and joseph

function _init()
	init_board()
	init_players()
end

function _update60()
	update_board()
	update_players()
end

function _draw()
	cls()
	draw_players()
	draw_board()
end
-->8
--tab 1: util
-->8
--tab 2: board

function init_board()
	board={}
	board_size=6
	tile_size=128/board_size
	
	for x=1,board_size do
		for y=1,board_size do
			board[(y-1)*board_size+x]=0x00
		end
	end
end

function update_board()
end

function draw_board()
	for x=1,board_size do
		for y=1,board_size do
			draw_board_square(x,y)
		end
	end
end

function assert_indices(x,y)
	assert(x>=1)
	assert(x<=board_size)
	assert(y>=1)
	assert(y<=board_size)
end

function board_index(x,y)
	assert_indices(x,y)
	return board[board_size*(y-1)+x]
end

function draw_board_square(x,y)
	assert_indices(x,y)
	local x1=(x-1)*tile_size
	local y1=(y-1)*tile_size
	rect(x1,y1,x1+tile_size,y1+tile_size)
end
-->8
--tab 3: player control

function init_players()
	p1={x=1,y=1}
	p2={x=board_size,y=board_size}
end

function update_players()
	if btnp(0,0) and p1.x>1 then
		p1.x-=1
	elseif btnp(1,0) and p1.x<board_size then
		p1.x+=1
	elseif btnp(2,0) and p1.y>1 then
		p1.y-=1
	elseif btnp(3,0) and p1.y<board_size then
		p1.y+=1
	end
	
	if btnp(0,1) and p2.x>1 then
		p2.x-=1
	elseif btnp(1,1) and p2.x<board_size then
		p2.x+=1
	elseif btnp(2,1) and p2.y>1 then
		p2.y-=1
	elseif btnp(3,1) and p2.y<board_size then
		p2.y+=1
	end
end

function draw_players()
	local scale=tile_size
	
	local p1dx=(p1.x-1)*tile_size+1
	local p1dy=(p1.y-1)*tile_size+1
	sspr(8,8,8,8,p1dx,p1dy,scale,scale)
	
	local p2dx=(p2.x-1)*tile_size+1
	local p2dy=(p2.y-1)*tile_size+1
	
	sspr(16,8,8,8,p2dx,p2dy,scale,scale)
end
__gfx__
00000000000000000000000000000000cccccccc8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000555500777777000dd00000cccccccc8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070005555550776667000d0d0660cccccccc8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000055555500777777000d66000cccccccc8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000055555500776667000d66000cccccccc8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070005555550007777770d0d0660cccccccc8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000555500007777770dd00000cccccccc8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000cccccccc8888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccc00ccc8880088800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c000000c8000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c000000c8000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c000000c8000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c000000c8000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccc00ccc8880088800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
