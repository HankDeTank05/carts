pico-8 cartridge // http://www.pico-8.com
version 33
__lua__
--jukebox template
--by: hankdetank05

function _init()

	printh("\n\n\n\n\n")

	songs={
		"save rock and roll",
		"way less sad",
		"believer"
	}
	
	artists={
		"fall out boy",
		"ajr",
		"imagine dragons"
	}
	
	albums={
		"save rock and roll",
		"ok orchestra",
		"evolve"
	}
	
	years={
		"2013",
		"2021",
		"2017"
	}
	
	patterns={
		0,
		0,
		0
	}
	
	art={
		{x=64,y=0 ,w=64,h=64},
		{x=0 ,y=64,w=64,h=64},
		{x=64,y=64,w=64,h=64}
	}

	cur=1
	
	playing=false
	
	now_playing=""
	now_playing_dx=1
	
	current_song=songs[cur]
	current_artist=artists[cur]
	current_album=albums[cur]
	current_year=years[cur]
	
	art_dx=3
	art_dy=11
	art_dw=72
	art_dh=72
	
	btn_y=107
	
	button_diff=1
	
	--‚¨ÜÔ∏è+üÖæÔ∏è+‚ùé to toggle photo mode
	debug=true
	in_photo_mode=false
	_draw=jukebox_mode
	‚¨ÜÔ∏èreleased=true
	
	loaded=""
	sfxval=0
	sfxmemval=sfxaddr(sfxval)
	patval=0
	patmemval=musicaddr(patval)

end

function _update60()

	if debug then
		if btn(‚ùé) 
		   and btn(üÖæÔ∏è) 
		   and btn(‚¨ÜÔ∏è) 
		   and ‚¨ÜÔ∏èreleased then
			if in_photo_mode then
				_draw=jukebox_mode
				in_photo_mode=false
			else
				_draw=photo_mode
				in_photo_mode=true
			end
			‚¨ÜÔ∏èreleased=false
		elseif not(btn(‚¨ÜÔ∏è)) then
			‚¨ÜÔ∏èreleased=true
		end
	end

	if btnp(‚û°Ô∏è) then
		
		cur+=1
		if cur>#songs then
			cur=1
		end
		if playing then
			music(patterns[cur])
			now_playing_dx=1
		end
		
	elseif btnp(‚¨ÖÔ∏è) then
	
		cur-=1
		if cur<1 then
			cur=#songs
		end
		if playing then
			music(patterns[cur])
			now_playing_dx=1
		end
	
	elseif btnp(‚ùé) and not(btn(üÖæÔ∏è) or btn(‚¨ÜÔ∏è)) then
	
		--this code is for testing sfx
		--[[if cur==1 then
			sfx(0)
		elseif cur==3 then
			loaded_bytes=load_believer()
			sfx(1)
		end--]]
	
		if playing then
			music(-1)
			playing=false
			
		elseif cur<=#patterns then
			if cur==1 and loaded!="srr" then
				load_srr()
			elseif cur==2 and loaded!="wls" then
				load_wls()
			elseif cur==3 and loaded!="believer" then
				load_believer()
			end
			music(patterns[cur])
			playing=true
			
		end--]]
	
	elseif btnp(‚¨ÜÔ∏è) then
		
		if btn(üÖæÔ∏è) then
			if patval<63 then
				patval+=1
			end
			patmemval=musicaddr(patval)
			
		else
			if sfxval<63 then
				sfxval+=1
			end
			sfxmemval=sfxaddr(sfxval)
		end
		
	elseif btnp(‚¨áÔ∏è) then
	
		if btn(üÖæÔ∏è) then
			if patval>0 then
				patval-=1
			end
			patmemval=musicaddr(patval)
		
		else
			if sfxval>0 then
				sfxval-=1
			end
			sfxmemval=sfxaddr(sfxval)
		end
	end
	
	current_song=songs[cur]
	current_artist=artists[cur]
	current_album=albums[cur]
	current_year=years[cur]
	current_art=art[cur]
	
	now_playing="now playing: "..songs[cur]
	
	if playing==true and #now_playing*4>126 then
		now_playing_dx-=1
		if abs(now_playing_dx)>#now_playing*4 then
			now_playing_dx=128
		end
	else
		now_playing_dx=1
	end

end

function jukebox_mode()

	// fill the screen dark blue
	cls(1)
	
	
	//draw the ui
	line(80,0,80,127,6)
	
	print("‚ùé",100,6*7,12)
	print("play/pause",85,6*8,12)
	
	print("‚¨ÖÔ∏è",100,6*10,12)
	print("skip back",86,6*11,12)
	
	print("‚û°Ô∏è",100,6*13,12)
	print("skip next",86,6*14,12)
	
	rectfill(art_dx-1,art_dy-1,art_dx+1+art_dw,art_dy+1+art_dh,0)
	sspr(current_art.x,current_art.y,current_art.w,current_art.h,art_dx,art_dy,art_dw,art_dh)
	--rectfill(art_dx,art_dy,art_dx+art_dw,art_dy+art_dh,7)	//this is for debugging
	print(current_song,art_dx,88,7)
	print(current_artist,art_dx,96,6)
	
	--line(2,104,74,104,6)
	--line(2,104,10,104,8)
	
	--draw rw button
	local rw=16
	if btn(‚¨ÖÔ∏è) then
		rw+=button_diff
	end
	spr(rw,art_dx,btn_y)
	
	--draw play/pause button
	if playing==true then
		playpause=32
	else
		playpause=48
	end
	if btn(‚ùé) then
		playpause+=button_diff
	end
	spr(playpause,art_dx+32,btn_y)
	
	--draw ff button
	local ff=0
	if btn(‚û°Ô∏è) then
		ff+=button_diff
	end
	spr(ff,art_dx+64,btn_y)

	// draw top bar
	rectfill(0,0,127,7,8)
	print("hank's jukebox vol. 1",1,1,2)
	
	--[[
	// draw album art and ui
	rectfill(0,88,127,120,0)
	if current_song==songs[1] then
		sspr(8,0,32,32,art_x,art_y,art_w,art_h)
	elseif current_song==songs[2] then
		sspr(48,0,32,32,art_x,art_y,art_w,art_h)
	elseif current_song==songs[3] then
		sspr(88,0,32,32,art_x,art_y,art_w,art_h)
	end
	print(current_song,34,90,7)
	print(current_artist,34,98,7)
	print(current_album,34,106,7)
	print(current_year,34,114,7)
	--]]
	
	// draw bottom bar
	rectfill(0,121,127,127,8)
	if playing then
		print(now_playing,now_playing_dx,122,2)		
	else
		print("paused",1,122,2)
	end
	
	// these are for debugging
	--print(stat(24),96,64,0)
	--print(stat(16),96,70,0)
	--print(stat(17),96,76,0)
	--print(stat(18),96,82,0)
	--print(stat(19),96,88,0)
	print(loaded,96,92,11)
	--print("0x"..num2hex(sfxmemval),96,1,2)
	rectfill(0,0,127,64,0)
	printsfx(sfxval)
	printmusic(patval)
	--print(loaded_bytes,0,120,11)
	--printmusic(0)

end

function photo_mode()
	cls()
	local draw_pos={
		{x=0,y=0},
		{x=64,y=0},
		{x=0,y=64},
		{x=64,y=64,size=64},
		{x=0,y=64,w=128,h=64}
	}
	if #songs>1 then
		for i=1,#art do
			sspr(art[i].x,art[i].y,art[i].w,art[i].h,draw_pos[i].x,draw_pos[i].y)
		end
	else
		sspr(art[1].x,art[1].y,art[1].w,art[1].h,32,0)
	end
	if #songs==3 then
		sspr(32,0,32,32,draw_pos[4].x,draw_pos[4].y,draw_pos[4].size,draw_pos[4].size)
	elseif #songs<=2 then
		sspr(0,32,64,32,draw_pos[5].x,draw_pos[5].y,draw_pos[5].w,draw_pos[5].h)
	end
end
-->8
--tab 1: sfx index

--[[

key
---
??? = song 1
??? = song 2
??? = song 3
---

count
---
??? : 00/64 : 00%
??? : 00/64 : 00%
??? : 00/64 : 00%
---

sfx
---
01
02
03
04
05
06
07
08
09
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
---

--]]
-->8
--tab 2: percussion

--[[
bass drum = c 1?43
?	for more punchy sound, try
		different instrumnets

snare drum = c ?615
?	(start with 3) the higher the
		pitch, the more the sound
		will cut through everything
		else in the track

cymbal bell = d#5?15
?	(start with 2) try
		experimenting with the
		instrument, see what you like

cool sound = d#2?13
?	(start with 3) experiment
		with the instrument
--]]
-->8
--tab 3: save rock and roll

function load_srr()

	loaded="srr"

end
-->8
--tab 4: way less sad

function load_wls()

	loaded="wls"
	
end
-->8
--tab 5: believer

function load_believer()

	--the code below is for testing
	
	--[[blvr_filebytes="0x010203041c1651c4541cf4318b321c4211f2100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	blvr_membytes=sfx_file2mem(blvr_filebytes)
	memset_hexstr(sfxaddr(1),blvr_membytes)
	
	return blvr_membytes--]]

	--sfx 8 = line 515
	
	sfxdata={
		{sfxid=3,bytes="0x010a02031605018051180500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},
		{sfxid=8,bytes="0x01140000000001c6001c6001c6001880000000000001b30000000000002460000000000000000000000000001b35300000000000000000000000002467500000000001b3331b3331b3331b35300000000001b300"},
		{sfxid=9,bytes="0x01140000000000000000000000000000000000000000000000000000000000000000000000000000000000000c16300200002001b32300200002000020000200000000c1330c1330c1330c16300200002001b323"},
		{sfxid=10,bytes="0x011400000a5300a5300d5300a5300a5300d5300a5300a5300d5300a5300a5300d5300a5300a5300d5300a5300a5300d5300a5300a5300d5300a5300a5300d53006530065300d53006530065300d5300653006530"},
		{sfxid=11,bytes="0x011400000d53006530065300d53009530095300d53009530095300d53009530095300d53009530095300d5300a5300a5300d5300a5300a5300d5300a5300a5300d5300a5300a5300d5300a5300a5300d5300a530"},
		{sfxid=12,bytes="0x011400000a5300d5300a5300a5300d5300a5300a5300d53006530065300d53006530065300d53006530065300d53006530065300d53009530095300d53009530095300d53009530095300d53009530095300d530"},
		{sfxid=13,bytes="0x011400001606016060160601d0601d0601d0601b0601b0601b0651b0601b060190601b0601b0601b0651b0601b0601d0601b0601b060190601606016060140601606016060160601d0601d0601d0601b0601b060"},
		{sfxid=14,bytes="0x011400001b0651b0601b060190601b0601b0601b0651b0601b0601d0601b0601b060190601606016060140601606016060160601906019060190602206022060220602206022060220601d0601d0601d0601d060"},
		{sfxid=15,bytes="0x01140000000001d0601b0601b0601906016060160601406016060160601606019060190601906022060220602206022060220602206021b602106021050210502105021040210402104021030210302103021020"},
		{sfxid=16,bytes="0x011400001606016065160601d0601d0601d0601b0601b0651b0651b0601b060190601b0601b0651b0651b0601b0601d0601b0601b060190601606016060140601606016060160601d0601d0651d0601b0601b060"},
		{sfxid=17,bytes="0x011400001b0651b0601b060190601b0601b0601b0651b0601b0601d0601b0601b060190601606016060140601606016060160601906019060190602206022060220602206022060220601d0601d0601d0601d060"},
		{sfxid=18,bytes="0x01140000000001d0601b0601b0601906016060160601406016060160601606019060190601906022060220602206022060220602206021b602106021050210502105021040210402104000000000001506515065"},
		{sfxid=19,bytes="0x011400001b35300000000001b30000000000002467500000000001b3331b3331b3331b35300000000001b30000000000002467500000000001b3331b3331b3331b35300000000001b30000000000002467500000"},
		{sfxid=20,bytes="0x01140000000001b3331b3331b3331b35300000000001b30000000000002467500000000001b30000000000001b35300000000001b30000000000002467500000000001b3331b3331b3331b35300000000001b300"},
		{sfxid=21,bytes="0x0114000000000000002467500000000001b3331b3331b3331b35300000000001b30000000000002467500000000001b3331b3331b3331b35300000000001b3000000000000246750000000000000000000000000"},
		{sfxid=22,bytes="0x011400000c16300200002001b32300200002000020000200000000c1330c1330c1330c16300200002001b32300200002000020000200000000c1330c1330c1330c16300200002001b32300200002000020000200"},
		{sfxid=23,bytes="0x01140000000000c1330c1330c1330c16300200002001b32300200002000020000200000001b32300000000000c16300200002001b32300200002000020000200000000c1330c1330c1330c16300200002001b323"},
		{sfxid=24,bytes="0x0114000000000000000000000000000000c1330c1330c1330c16300200002001b32300200002000020000200000000c1330c1330c1330c16300200002001b32300200002000020000200000001b3230000000000"},
		{sfxid=25,bytes="0x011400001606016065160601606516065160651606016065160651606516065160651606016065160601606516065160651606016065160651606516065160651906019065190601906519065190651906019065"},
		{sfxid=26,bytes="0x011400001906519065190651906518065180651806518065180651806518065180651806518065180651806516060160651606016065160651606516060160601606516065160651606516060160651606016065"},
		{sfxid=27,bytes="0x011400001606516065160601606016065160651606516065190601906519060190651906519065190601906019065190651906519065180601806518060180651806518065000000000000000000000000000000"},
		{sfxid=28,bytes="0x011400000a5300d5300a5300a5300d5300a5300a5300d53006530065300d53006530065300d53006530065300d53006530065300d53009530095300d53009530095300d530186141863018650186700000000000"},
		{sfxid=29,bytes="0x191400000a5700a5700a5700a5700a5700a5701657116570165701657000000225502555025555255502455024550225502555025555255502455024550225552255022550225502555025550255500000000000"},
		{sfxid=30,bytes="0x19140000000000000000000255502455024550245502155021550215500000000000000000000000000000000a5700a5700a5700a5700a5700a57016571165701657016570000002255025550255552555024550"},
		{sfxid=31,bytes="0x191400002455022550255502555525550245502455022555225502255022550255502555025550000000000000000000000000025550245502455024550215502155021550000000000000000000000000000000"},
		{sfxid=32,bytes="0x191400001657016570165701657016570165700a5710a5700a5700a57000000195501b5501b550195501b5501b550195501b5501b550195501b5501b550195501b5501d5511d5501d5501d5501d5501655016550"},
		{sfxid=33,bytes="0x19140000165501655016550195501b5501b550195501b5501b550195501b5501b550195501b5501b5501b5500a5500a5500a5500a5500a5500a55016551165501655016550000002255025550255552555024550"}
	}
	
	patterns={
		--01 09084844
		{patid=0,bytes="0x0109084844"},
		--00 1815554d
		{patid=1,bytes="0x001815554d"},
		--01 16130a0d
		{patid=2,bytes="0x0116130a0d"},
		--00 17140b0e
		{patid=3,bytes="0x0017140b0e"},
		--00 18150c0f
		{patid=4,bytes="0x0018150c0f"},
		--00 16130a10
		{patid=5,bytes="0x0016130a10"},
		--00 17140b11
		{patid=6,bytes="0x0017140b11"},
		--00 18150c12
		{patid=7,bytes="0x0018150c12"},
		--00 16130a19
		{patid=8,bytes="0x0016130a19"},
		--00 17140b1a
		{patid=9,bytes="0x0017140b1a"},
		--00 18151c1b
		{patid=10,bytes="0x0018151c1b"},
		--00 16130a1d
		{patid=11,bytes="0x0016130a1d"},
		--00 17140b1e
		{patid=12,bytes="0x0017140b1e"},
		--00 18150c1f
		{patid=13,bytes="0x0018150c1f"},
		--00 16130a20
		{patid=14,bytes="0x0016130a20"},
		--00 17140b21
		{patid=15,bytes="0x0017140b21"},
		--02 18150c1f
		{patid=16,bytes="0x0218150c1f"}
	}
	
	loadsfxdata(sfxdata)

	loadpatterns(patterns)
	
	loaded="believer"--]]
	
end
-->8
--tab 6: music mem util

function sfxaddr(sfxid)
	return 0x3200+sfxid*68
end

function musicaddr(patid)
	return 0x3100+patid*4
end

function num2hex(number)
    local base = 16
    local result = {}
    local resultstr = ""

    local digits = "0123456789abcdef"
    local quotient = flr(number / base)
    local remainder = number % base

    add(result, sub(digits, remainder + 1, remainder + 1))

  while (quotient > 0) do
    local old = quotient
    quotient /= base
    quotient = flr(quotient)
    remainder = old % base

         add(result, sub(digits, remainder + 1, remainder + 1))
  end

  for i = #result, 1, -1 do
    resultstr = resultstr..result[i]
  end

  return resultstr
end

function printsfx(sfxid)
	
	local x=0
	local y=0
	
	sfxstart=sfxaddr(sfxid)
	sfxend=sfxstart+67

	for i=sfxstart,sfxend do
		print(num2hex(peek(i)),x,y,11)
		x+=10
		if x>=119 then
			x=0
			y+=6
		end
	end
	
	print(sfxid,x,y,8)
end

function printmusic(patid)
	
	musicstart=musicaddr(patid)
	musicend=musicstart+3
	
	local x=0
	local y=7*6
	
	for i=musicstart,musicend do
		print(num2hex(peek(i)),x,y,11)
		x+=10
		if x>=119 then
			x=0
			y+=6
		end
	end
	
	print(patid,x,y,8)
	
end

function convertsfxdata(hex_str)

	assert(#hex_str==168)

	--byte #0
	--0x00==pitch mode
	--0x01==note entry mode
	local editor_mode=hex_str[1]..hex_str[2]
	
	--byte #1
	--multiples of 1/128 seconds
	local note_duration=hex_str[3]..hex_str[4]
	
	--byte #2
	--note number, 0-63
	local loop_range_start=hex_str[5]..hex_str[6]
	
	--byte #3
	--note number, 0-63
	local loop_range_end=hex_str[7]..hex_str[8]
	
	--bytes 4-84
	--the rest are notes
	local notes={}
	
	local current_note=""
	local nybble=0
	for i=9,168 do
		--conversion stuff
		
		nybble+=1
		if nybble>4 then
			nybble=0
		end
	end

end--tab 1: util f(x)'s

function str_hex2bin(hexstr)
	
	assert(sub(hexstr,1,2)=="0x","hex strings must lead with '0x'!")
	
	local binstr="0b"
	
	for i=3,#hexstr do
	
		local nyble=sub(hexstr,i,i)
		
		if nyble=="0" then
			binstr=binstr.."0000"
		elseif nyble=="1" then
			binstr=binstr.."0001"
		elseif nyble=="2" then
			binstr=binstr.."0010"
		elseif nyble=="3" then
			binstr=binstr.."0011"
		elseif nyble=="4" then
			binstr=binstr.."0100"
		elseif nyble=="5" then
			binstr=binstr.."0101"
		elseif nyble=="6" then
			binstr=binstr.."0110"
		elseif nyble=="7" then
			binstr=binstr.."0111"
		elseif nyble=="8" then
			binstr=binstr.."1000"
		elseif nyble=="9" then
			binstr=binstr.."1001"
		elseif nyble=="a" then
			binstr=binstr.."1010"
		elseif nyble=="b" then
			binstr=binstr.."1011"
		elseif nyble=="c" then
			binstr=binstr.."1100"
		elseif nyble=="d" then
			binstr=binstr.."1101"
		elseif nyble=="e" then
			binstr=binstr.."1110"
		elseif nyble=="f" then
			binstr=binstr.."1111"
		else
			assert(1==0,nyble.." is not a hex digit!")
		end
	end
	
	return binstr

end

function str_bin2hex(binstr)

	assert(sub(binstr,1,2)=="0b","binstr is not a binary string! binary strings must start with '0b'!")
	assert((#binstr-2)%4==0,"the number of bits in binstr must be a multiple of 4!")

	local hexstr="0x"
	
	for i=3,#binstr,4 do
		
		local nyble=sub(binstr,i,i+3)
		assert(#nyble==4,"nyble must have 4 binary digits!")
		
		if nyble=="0000" then
			hexstr=hexstr.."0"
		elseif nyble=="0001" then
			hexstr=hexstr.."1"
		elseif nyble=="0010" then
			hexstr=hexstr.."2"
		elseif nyble=="0011" then
			hexstr=hexstr.."3"
		elseif nyble=="0100" then
			hexstr=hexstr.."4"
		elseif nyble=="0101" then
			hexstr=hexstr.."5"
		elseif nyble=="0110" then
			hexstr=hexstr.."6"
		elseif nyble=="0111" then
			hexstr=hexstr.."7"
		elseif nyble=="1000" then
			hexstr=hexstr.."8"
		elseif nyble=="1001" then
			hexstr=hexstr.."9"
		elseif nyble=="1010" then
			hexstr=hexstr.."a"
		elseif nyble=="1011" then
			hexstr=hexstr.."b"
		elseif nyble=="1100" then
			hexstr=hexstr.."c"
		elseif nyble=="1101" then
			hexstr=hexstr.."d"
		elseif nyble=="1110" then
			hexstr=hexstr.."e"
		elseif nyble=="1111" then
			hexstr=hexstr.."f"
		else
			assert(1==0,nyble.." is not equivalent to any hex digit!")
		end
		
	end
	
	return hexstr

end

function note_file2mem(filebits)

	--filebits is a string
	--starting with "0b" followed
	--by twenty characters, all
	--ones or zeros
	
	assert(sub(filebits,1,2)=="0b","filebits is not a binary string! binary strings must start with '0b'!")
	assert(#filebits==20+2,"filebits is not the correct length! must be 20 binary digits with a leading '0b'!")

	local membits="0b"
	
	--cust./reg. inst. (1 bit)
	membits=membits..sub(filebits,9+2,9+2) --9th bit, add two because of leading '0b'
	
	--effect (3 bits)
	membits=membits..sub(filebits,18+2,20+2) --bits 18-20 from filebits
	
	--volume (3 bits)
	membits=membits..sub(filebits,14+2,16+2) --bits 14-16 from filebits
	
	--waveform (3 bits)
	membits=membits..sub(filebits,10+2,12+2) --bits 10-12 from filebits
	
	--pitch (6 bits)
	membits=membits..sub(filebits,3+2,8+2) --bits 3-8 from filebits
	
	--finish by swapping upper and
	--lower bytes of membits
	membits=sub(membits,1,2)..sub(membits,11,18)..sub(membits,3,10)
	
	assert(sub(membits,1,2)=="0b","membits is not a binary string! binary strings must start with '0b'!")
	assert(#membits==16+2,"membits is not the correct length! must be 16 binary digits with a leading '0b'!")
	
	return membits

end

function sfx_file2mem(filebytes)
	
	assert(sub(filebytes,1,2)=="0x","hex strings must lead with '0x'!")
	
	local membytes="0x"
	local config_info=sub(filebytes,3,10)
	
	for i=11,#filebytes,5 do
		local note_filebytes="0x"..sub(filebytes,i,i+4)
		local note_filebits=str_hex2bin(note_filebytes)
		
		local note_membits=note_file2mem(note_filebits)
		local note_membytes=str_bin2hex(note_membits)
		
		membytes=membytes..sub(note_membytes,3)
	end
	
	membytes=membytes..config_info
	
	return membytes
	
end

function music_file2mem(filebytes)
	
	assert(sub(filebytes,1,2)=="0x","hex strings must lead with '0x'!")
	
	local membytes="0x"..sub(filebytes,3+2)
	local membits=str_hex2bin(membytes)
	
	local flagsbytes="0x"..sub(filebytes,2+2,2+2)
	local flagsbits=str_hex2bin(flagsbytes)
	
	printh(flagsbits)
	
	if sub(flagsbits,-1,-1)=="1" then
		printh("flag 0")
		membits=sub(membits,1,2).."1"..sub(membits,4)
	end
	
	if sub(flagsbits,-2,-2)=="1" then
		printh("flag 1")
		membits=sub(membits,1,10).."1"..sub(membits,12)
	end
	
	if sub(flagsbits,-3,-3)=="1" then
		printh("flag 2")
		membits=sub(membits,1,18).."1"..sub(membits,20)
	end
	
	printh("\n")
	
	membytes=str_bin2hex(membits)
	
	return membytes
	
end

function memset_hexstr(addr,data)
	data=sub(data,3)
	for i=1,#data,2 do
		poke(addr,"0x"..sub(data,i,i+1))
		addr+=1
	end
end

function loadsfxdata(sfxdata)
	--load the sfx data
	for i=1,#sfxdata do
		local membytes=sfx_file2mem(sfxdata[i].bytes)
		local address=sfxaddr(sfxdata[i].sfxid)
		memset_hexstr(address,membytes)
	end
end

function loadpatterns(patterns)
	--load the pattern data	
	for i=1,#patterns do
		local membytes=music_file2mem(patterns[i].bytes)
		local address=musicaddr(patterns[i].patid)
		memset_hexstr(address,membytes)
	end
end
__gfx__
76000076070000070005556000000000111111111111111111111111111111118888888888888888888888888888888888888888888888888888888888888888
77760076077700070005555600000000188111118811888888118811111111118000000000000000000000000000000000000000000000000000000000000008
77777676077777070005560000000000188111118811888888118811111111118000000000000000000000000000000000000000000000000000000000000008
77777776077777770005560000000000188111118818811118818811111111118000000000000000000000000000000000000000000000000000000000000008
77777776077777770555560000000000188111118818811118818811111111118000000000000000000000000000000000000000000000000000000000000008
77777676077777075555560000000000118811188118811118818811111111118000000000000000000000000000000000000000000000000000000000000008
77760076077700075555560000000000118811188118811118818811111111118000000000000000000000000000000000000000000000000000000000000008
76000076070000070555600000000000118811188118811118818811111111118000000000000000000000000000000000000000000000000000000000000008
76000076070000070000555000000000118811188118811118818811111111118000000000000000000000000000000000000000000000000000000000000008
76007776070007770000555500000000111881881118811118818811111111118000000000000000000000000000000000000000000000000000000000000008
76777776070777770000550000000000111881881118811118818811111111118000000000000000000000000000000000000000000000000000000000000008
77777776077777770000550000000000111881881118811118818811111111118000000000000000000000000000000000000000000000000000000000000008
77777776077777770055550000000000111881881118811118818811111111118000000000000000000000000000000000000000000000000000000000000008
76777776070777770555550000000000111188811111888888118888888118818000000000000000000000000000000000000000000000000000000000000008
76007776070007770555550000000000111188811111888888118888888118818000000000000000000000000000000000000000000000000000000000000008
76000076070000070055500000000000111111111111111111111111111111118000000000000000000000000000000000000000000000000000000000000008
00777600000777000000000000000000111111111111111111111111111111118000000000000000000000000000000000000000000000000000000000000008
07777760007777700000000000000000111881111118811111111144441111118000000000000000000000000000000000000000000000000000000000000008
77070776077070770000000000000000111888111188811111114499994411118000000000000000000000000000000000000000000000000000000000000008
77070776077070770000000000000000111188111188111111149994499941118000000000000000000000000000000000000000000000000000000000000008
77070776077070770000000000000000111188811888111111149444444941118000000000000000000000000000000000000000000000000000000000000008
77070776077070770000000000000000111118888881111111666444444666118000000000000000000000000000000000000000000000000000000000000008
077777600077777000000000000000001111118888111111118882ffff2888118000000000000000000000000000000000000000000000000000000000000008
007776000007770000000000000000001111118888111111116662ffff2666118000000000000000000000000000000000000000000000000000000000000008
00777600000777000000000000000000111111888811111111495555555594118000000000000000000000000000000000000000000000000000000000000008
07077760007077700000000000000000111111888811111111495444444594118000000000000000000000000000000000000000000000000000000000000008
77007776077007770000000000000000111118888881111111495444444594118000000000000000000000000000000000000000000000000000000000000008
77000776077000770000000000000000111188811888111111495444444594118000000000000000000000000000000000000000000000000000000000000008
77000776077000770000000000000000111188111188111111445444444544118000000000000000000000000000000000000000000000000000000000000008
77007776077007770000000000000000111888111188811111445555555544118000000000000000000000000000000000000000000000000000000000000008
07077760007077700000000000000000111881111118811111441111111144118000000000000000000000000000000000000000000000000000000000000008
00777600000777000000000000000000111111111111111111111111111111118000000000000000000000000000000000000000000000000000000000000008
11111111111111111111111111111111111111111111111111111111111111118000000000000000000000000000000000000000000000000000000000000008
11111111881881111881881111881888888881888888111118888111881118818000000000000000000000000000000000000000000000000000000000000008
11111111881881111881881118881888888881888888811188888811881118818000000000000000000000000000000000000000000000000000000000000008
11111111881881111881881188811881111111881118811188118811888188818000000000000000000000000000000000000000000000000000000000000008
11111111881881111881881888111881111111881118811888118881188188118000000000000000000000000000000000000000000000000000000000000008
11111111881881111881888881111881111111881118811881111881188888118000000000000000000000000000000000000000000000000000000000000008
11111111881881111881888811111888888111888888811881111881118881118000000000000000000000000000000000000000000000000000000000000008
11111111881881111881888111111888888111888888111881111881118881118000000000000000000000000000000000000000000000000000000000000008
11111111881881111881888811111881111111888888811881111881118881118000000000000000000000000000000000000000000000000000000000000008
11111111881881111881888881111881111111881118881881111881118881118000000000000000000000000000000000000000000000000000000000000008
11111111881881111881881881111881111111881111881881111881188888118000000000000000000000000000000000000000000000000000000000000008
11111111881888118881881888111881111111881111881888118881188188118000000000000000000000000000000000000000000000000000000000000008
18811111881188118811881188811881111111881118881188118811888188818000000000000000000000000000000000000000000000000000000000000008
18881118881188888811881118881888888881888888811188888811881118818000000000000000000000000000000000000000000000000000000000000008
11888888811118888111881111881888888881888888111118888111881118818000000000000000000000000000000000000000000000000000000000000008
11188888111111111111111111111111111111111111111111111111111111118000000000000000000000000000000000000000000000000000000000000008
11111111111111111111111111111111111111111111111111111111111111118000000000000000000000000000000000000000000000000000000000000008
18811111881188888811881111111111111881111118811111111144441111118000000000000000000000000000000000000000000000000000000000000008
18811111881188888811881111111111111888111188811111114499994411118000000000000000000000000000000000000000000000000000000000000008
18811111881881111881881111111111111188111188111111149994499941118000000000000000000000000000000000000000000000000000000000000008
18811111881881111881881111111111111188811888111111149444444941118000000000000000000000000000000000000000000000000000000000000008
11881118811881111881881111111111111118888881111111666444444666118000000000000000000000000000000000000000000000000000000000000008
118811188118811118818811111111111111118888111111118882ffff2888118000000000000000000000000000000000000000000000000000000000000008
118811188118811118818811111111111111118888111111116662ffff2666118000000000000000000000000000000000000000000000000000000000000008
11881118811881111881881111111111111111888811111111495555555594118000000000000000000000000000000000000000000000000000000000000008
11188188111881111881881111111111111111888811111111495444444594118000000000000000000000000000000000000000000000000000000000000008
11188188111881111881881111111111111118888881111111495444444594118000000000000000000000000000000000000000000000000000000000000008
11188188111881111881881111111111111188811888111111495444444594118000000000000000000000000000000000000000000000000000000000000008
11188188111881111881881111111111111188111188111111445444444544118000000000000000000000000000000000000000000000000000000000000008
11118881111188888811888888811881111888111188811111445555555544118000000000000000000000000000000000000000000000000000000000000008
11118881111188888811888888811881111881111118811111441111111144118000000000000000000000000000000000000000000000000000000000000008
11111111111111111111111111111111111111111111111111111111111111118888888888888888888888888888888888888888888888888888888888888888
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
80000000000000000000000000000000000000000000000000000000000000088000000000000000000000000000000000000000000000000000000000000008
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
__sfx__
010203041c1651c4541cf4318b321c4211f2100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
02 01020304

